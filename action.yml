name: 'Miqa Offline Test Kickoff'
description: 'Kick off offline test runs in Miqa, optionally upload outputs, and update metadata or version overrides. Optionally create GitHub status checks.'

inputs:
  MIQA_API_KEY:
    description: 'Miqa API Key'
    required: true
  MIQA_ENDPOINT:
    description: 'Root URL for Miqa (proxy or app domain)'
    required: true
  TRIGGER_ID:
    description: 'Miqa test trigger ID'
    required: true
  VERSION_NAME:
    description: 'Version name for the run'
    required: true
  OUTPUTS_ALREADY_ON_CLOUD:
    description: 'Set to true if outputs are already in cloud storage'
    required: false
    default: 'false'
  GET_METADATA_KEY:
    description: 'Metadata key to match for fetching latest TCR'
    required: false
    default: ''
  GET_METADATA_VALUE:
    description: 'Metadata value to match for fetching latest TCR'
    required: false
    default: ''
  SET_METADATA:
    description: |
      Metadata key-values to set on the run.
      Use YAML or JSON format:

        status: success
        pipeline: exome
    required: false
    default: ''
  LOCATIONS:
    description: |
      Mapping of sample names to file locations.
      Use YAML format:

        sample1: gs://bucket/sample1.vcf
        sample2: s3://bucket/sample2.vcf
    required: false
  OUTPUT_BUCKET_OVERRIDE:
    description: 'Optional bucket name to apply to all samples if only folders are provided in LOCATIONS'
    required: false
  LOCATIONS_FILE:
    description: |
      Path to a file mapping dataset/sample names to file locations.
      Supported formats:

      • YAML or JSON:
          sample1: gs://bucket/sample1.vcf

      • CSV:
        - With headers:
              dataset,path
              sample1,gs://bucket/sample1.vcf

        - Without headers:
              sample1,gs://bucket/sample1.vcf
    required: false
  INSTALLATION_ID:
    description: 'App Installation ID for the miqa-status-check GitHub App (optional)'
    required: false
  CHECK_NAME:
    description: 'Name to display in checks status'
    required: false
    default: 'Triggered Miqa Offline Test'
  SHA:
    description: 'Commit SHA (e.g., github.sha)'
    required: false
  REPOSITORY:
    description: 'GitHub repository (e.g., github.repository)'
    required: false
  MIQA_GITHUB_APP:
    description: 'Base URL for Miqa GitHub App'
    required: false
    default: 'https://miqa-github.herokuapp.com'

outputs:
  run_id:
    description: 'Miqa run ID'
  run_link:
    description: 'Link to the Miqa test chain run'

runs:
  using: "composite"
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Upgrade pip
      shell: bash
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      shell: bash
      run: pip install -r "${{ github.action_path }}/requirements.txt"

    - name: Write LOCATIONS to file
      if: ${{ inputs.LOCATIONS != '' }}
      shell: bash
      run: echo "${{ inputs.LOCATIONS }}" > .locations.yaml

    - name: Fetch commit SHA
      id: fetch_sha
      if: ${{ inputs.INSTALLATION_ID != '' }}
      uses: octokit/request-action@v2.x
      with:
        route: GET /repos/{repo}/commits/{sha}
      env:
        GITHUB_TOKEN: ${{ github.token }}
        INPUT_REPO: ${{ inputs.REPOSITORY }}
        INPUT_SHA: ${{ inputs.SHA }}

    - name: Save commit SHA
      if: ${{ inputs.INSTALLATION_ID != '' }}
      id: get_sha
      shell: bash
      run: |
        echo "parent_sha=${{ toJSON(fromJSON(steps.fetch_sha.outputs.data).parents[1].sha) }}" >> "$GITHUB_OUTPUT"

    - if: ${{ inputs.INSTALLATION_ID != '' && github.event_name == 'pull_request' && steps.get_sha.outputs.parent_sha != 'null' }}
      shell: bash
      run: echo "NEW_SHA=${{ steps.get_sha.outputs.parent_sha }}" >> $GITHUB_ENV

    - if: ${{ inputs.INSTALLATION_ID != '' && (github.event_name != 'pull_request' || steps.get_sha.outputs.parent_sha == 'null') }}
      shell: bash
      run: echo "NEW_SHA=${{ inputs.SHA }}" >> $GITHUB_ENV

    - name: Create GitHub Check Run
      if: ${{ inputs.INSTALLATION_ID != '' }}
      id: create_check
      uses: fjogeleit/http-request-action@v1.14.0
      with:
        url: '${{ inputs.MIQA_GITHUB_APP }}/create_check_manual'
        method: 'POST'
        timeout: 30000
        customHeaders: '{"Content-Type": "application/json"}'
        data: '{"installation_id":"${{ inputs.INSTALLATION_ID }}","repository_full_name":"${{ inputs.REPOSITORY }}", "head_sha":"${{ env.NEW_SHA  }}", "check_name":"${{inputs.CHECK_NAME}}", "gha_version":"1.1.5"}'

    - name: Suggest GitHub App installation if check run fails
      if: ${{ failure() && inputs.INSTALLATION_ID != '' }}
      shell: bash
      run: |
        echo "❌ Failed to create GitHub check run."
        echo "🔍 Most common cause: The Miqa GitHub App is not installed on the repository:"
        echo "    ${{ inputs.REPOSITORY }}"
        echo ""
        echo "💡 To fix: Visit your GitHub App settings and install the app on this repo with 'checks: write' permission."
        echo "🔗 https://github.com/apps/YOUR-MIQA-APP-NAME/installations"

    - name: Set CHECK_RUN_ID
      if: ${{ inputs.INSTALLATION_ID != '' }}
      shell: bash
      run: |
        echo "CHECK_RUN_ID=${{ fromJSON(fromJSON(toJSON(steps.create_check.outputs.response))).id }}" >> $GITHUB_ENV

    - name: Run MIQA CLI Script
      id: run_miqa
      shell: bash
      run: |
        python "${{ github.action_path }}/run-miqa.py" \
          --server "${{ inputs.MIQA_ENDPOINT }}" \
          --api-key "${{ inputs.MIQA_API_KEY }}" \
          --trigger-id "${{ inputs.TRIGGER_ID }}" \
          --version-name "${{ inputs.VERSION_NAME }}" \
          ${{ inputs.OUTPUTS_ALREADY_ON_CLOUD == 'true' && '--outputs-already-on-cloud' || '' }} \
          ${{ inputs.GET_METADATA_KEY && format('--get-metadata-key \"{0}\"', inputs.GET_METADATA_KEY) || '' }} \
          ${{ inputs.GET_METADATA_VALUE && format('--get-metadata-value \"{0}\"', inputs.GET_METADATA_VALUE) || '' }} \
          ${{ inputs.SET_METADATA && format('--set-metadata \"{0}\"', inputs.SET_METADATA) || '' }} \
          ${{ inputs.LOCATIONS != '' && '--locations-file .locations.yaml' || '' }} \
          ${{ inputs.LOCATIONS_FILE && format('--locations-file \"{0}\"', inputs.LOCATIONS_FILE) || '' }} \
          ${{ inputs.OUTPUT_BUCKET_OVERRIDE && format('--output-bucket-override \"{0}\"', inputs.OUTPUT_BUCKET_OVERRIDE) || '' }} \
          ${{ env.CHECK_RUN_ID && format('--event-id {0}', env.CHECK_RUN_ID) || '' }} \
          --json-output-file .miqa_output.json --app-name gh

        echo "run_id=$(jq -r .run_id < .miqa_output.json)" >> $GITHUB_OUTPUT
        echo "run_link=$(jq -r .link < .miqa_output.json)" >> $GITHUB_OUTPUT

    - name: Print Miqa Test Run Summary
      shell: bash
      run: |
        echo ""
        echo "✅ Miqa Test Run is ready!"
        echo "🧪 Run ID: ${{ steps.run_miqa.outputs.run_id }}"
        echo "🔗 View results: ${{ steps.run_miqa.outputs.run_link }}"
